import React, { useState, useEffect } from 'react';
import FullCalendar from "@fullcalendar/react";
import dayGridPlugin from "@fullcalendar/daygrid";
import timeGridPlugin from "@fullcalendar/timegrid";
import interactionPlugin from "@fullcalendar/interaction";
import styles from './Calendar.module.css';

const Calendar = () => {
  // State to manage events
  const [events, setEvents] = useState([]);

  // Fetch events from the database (simulate with useEffect)
  useEffect(() => {
    const fetchEvents = async () => {
      try {
        // Simulating an API call to fetch events from a database
        const response = await fetch('/api/events'); // Replace with your actual API endpoint
        const data = await response.json(); // Assuming the API returns a JSON response

        // Map the data into the format FullCalendar expects
        const formattedEvents = data.map(event => ({
          title: event.title,
          start: event.startDate, // Ensure the date format matches the expected format
          end: event.endDate,
          description: event.description,
        }));

        // Update the state with the fetched events
        setEvents(formattedEvents);
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    fetchEvents();
  }, []); // Empty dependency array means this runs only once when the component mounts

  // Utility function to handle date adjustments and formatting
  const formatEventEndDate = (date) => {
    const localDate = new Date(date);
    localDate.setDate(localDate.getDate() - 1); // Adjust only the end date by subtracting 1 day
    return localDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
  };

  return (
    <div className={styles.calendarContainer}>
      <FullCalendar
        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}
        themeSystem="standard"
        initialView="dayGridMonth"
        headerToolbar={{
          start: "today",
          center: "title",
          end: "prev,next",
        }}
        buttonText={{
          today: "This Month",
        }}
        dayHeaderFormat={{
          weekday: 'long',
        }}
        height="750px"
        dayHeaderContent={(args) => args.text.toUpperCase()}
        titleFormat={{ year: 'numeric', month: 'long' }}
        events={events} // Use state events here
        eventContent={(eventInfo) => {
          const formattedStartDate = eventInfo.event.start.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
          const formattedEndDate = formatEventEndDate(eventInfo.event.end);

          return (
            <div className={styles.eventContent}>
              <div className={styles.eventDate}>
                {formattedStartDate} - {formattedEndDate}
              </div>
              <div className={styles.eventTitle}>
                {eventInfo.event.title}
              </div>
            </div>
          );
        }}
      />
    </div>
  );
};

export default Calendar;
